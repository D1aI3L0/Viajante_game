using NUnit.Framework;
using UnityEngine;

namespace CalculateTests
{
    [TestFixture]
    public class PlayerCharacterStatsCalculateTests
    {
        private PlayerCharacter character;

        [SetUp]
        public void Setup()
        {
            character = new PlayerCharacter();
            character.Initialize();

            // üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            CharacterParameters paramsData = new CharacterParameters
            {
                maxHP = 100,
                DEF = 10,
                EVA = 5,
                SP = 50,
                SPreg = 5,
                SPmovecost = 2,
                SPD = 15,
                PROV = 0
            };
            character.InitializeStats(paramsData);
        }

        [Test]
        public void TestBaseStatsInitialization()
        {
            // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            Assert.AreEqual(100, character.baseCharacterStats.maxHealth, "–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100.");
            Assert.AreEqual(10, character.baseCharacterStats.defence, "–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 10.");
            Assert.AreEqual(5, character.baseCharacterStats.evasion, "–ù–∞—á–∞–ª—å–Ω–æ–µ —É–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5.");
            Assert.AreEqual(15, character.baseCharacterStats.speed, "–ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 15.");
        }

        [Test]
        public void TestStatsRecalculationWithTrait()
        {
            TraitData traitData = new TraitData
            {
                effects = new TraitEffect[]
                {
                new TraitEffect { statType = StatType.Health, effectType = TraitEffectType.Additive, value = 20 },
                new TraitEffect { statType = StatType.Defence, effectType = TraitEffectType.Multiplicative, value = 50 }
                }
            };

            character.AddTrait(traitData);
            character.RecalculateStats();

            // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –Ω–∞ 20
            Assert.AreEqual(120, character.currentCharacterStats.maxHealth, "–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –Ω–∞ 20.");

            // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ 50%
            Assert.AreEqual(15, character.currentCharacterStats.defence, "–ó–∞—â–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –Ω–∞ 50%.");
        }

        [Test]
        public void TestArmorCoreBonuses()
        {
            character.equipment.armorCore = new ArmorCore();
            character.equipment.armorCore.Initialize();
            character.equipment.armorCore.HealthBonus = 10; // +10% –∑–¥–æ—Ä–æ–≤—å—è

            character.RecalculateStats();

            // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–Ω—É—Å—ã –±—Ä–æ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è
            Assert.AreEqual(110, character.currentCharacterStats.maxHealth, "–ë–æ–Ω—É—Å –±—Ä–æ–Ω–∏ –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å +10% –∑–¥–æ—Ä–æ–≤—å—è.");
        }
    }
}